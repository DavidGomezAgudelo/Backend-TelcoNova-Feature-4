# --------------------------
#Tipos Principales
#--------------------------
type EventType {
id: ID!
name: String!
priorityLevel: Int!
}
type DeliveryMethod {
id: ID!
name: String!
}
type DeliveryStatus {
id: ID!
name: String!
}
type Role {
id: ID!
name: String!
}
type User {
id: ID!
name: String!
email: String!
phone: String!
role: Role
address: String
createdAt: String
}
type Event {
id: ID!
eventType: EventType!
description: String
eventDate: String!
}
type Alert {
id: ID!
event: Event!
category: String
title: String!
description: String
priority: Int
active: Boolean!
createdAt: String!
}
type Notification {
id: ID!
alert: Alert!
scheduledDate: String!
status: DeliveryStatus!
createdAt: String!
}
type GroupModel {
id:ID!
name: String!
users: [User!]!
}
#--------------------------
#Inputs
#--------------------------
input CreateUserInput {
name: String!
email: String!
phone: String!
roleId: ID!
address: String
}
input CreateRoleInput {
name: String!
}
input CreateAlertInput {
title: String!
description: String
priority: Int
category: String
eventId: ID!
active: Boolean = true
}
input UpdateAlertInput {
title: String
description: String
priority: Int
category: String
active: Boolean
}
input CreateGroupInput {
name: String!
users: [ID!]!
}
type GroupWithUsers {
id: ID!
name: String!
users: [User!]!
}
input CreateEventInput {
eventTypeId: ID!
description: String!
eventDate: String!
}
#--------------------------
#Queries y Mutations
#--------------------------
type Query {
getUser(id: ID!): User
getAlerts: [Alert]
getAlertById(id: ID!): Alert
getRoles: [Role] #1
getAllGroups: [GroupModel]
getGroupById(id: ID!): GroupModel
getAllGroupsWithUsers: [GroupWithUsers]
getEvents:[Event] #1
}
type Mutation {
createUser(input: CreateUserInput!): User! #1
createAlert(input: CreateAlertInput!): Alert!
updateAlert(id: ID!, input: UpdateAlertInput!): Boolean!
deleteAlert(id: ID!): Boolean!
createRole(name: String): Role!
createGroup(input: CreateGroupInput!): GroupModel!
addUserToGroup(groupId: ID!, userId: ID!): GroupModel!
createEvent(input: CreateEventInput!): Event
}